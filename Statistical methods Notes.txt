# Drawing bootstrap replicates

def draw_bs_reps(data, func, size=1):
    """Draw bootstrap replicates."""

    # Initialize array of replicates: bs_replicates
    bs_replicates = np.empty( size )

    # Generate replicates
    for i in range( size ):
        bs_replicates[i] = bootstrap_replicate_1d( data ,func )

    return bs_replicates



# Take 10,000 bootstrap replicates of the mean: bs_replicates
bs_replicates = draw_bs_reps( rainfall , np.mean, size= 10000 )

# Compute and print standard error of the mean
sem = np.std(rainfall) / np.sqrt( len(rainfall) )
print(sem)

# Compute and print standard deviation of bootstrap replicates
bs_std = bs_replicates.std()
print(bs_std)

# Make a histogram of the results
_ = plt.hist(bs_replicates, bins=50, normed=True)
_ = plt.xlabel('mean annual rainfall (mm)')
_ = plt.ylabel('PDF')

# Show the plot
plt.show()




# Draw bootstrap replicates of the mean no-hitter time (equal to tau): bs_replicates
bs_replicates = draw_bs_reps( nohitter_times , np.mean , 10000)

# Compute the 95% confidence interval: conf_int
conf_int = np.percentile( bs_replicates , [2.5 , 97.5]) # or use quantile with 0.025 and 0.975

# Print the confidence interval
print('95% confidence interval =', conf_int , 'games')

# Plot the histogram of the replicates
_ = plt.hist(bs_replicates, bins=50, normed=True)
_ = plt.xlabel(r'$\tau$ (games)')
_ = plt.ylabel('PDF')

# Show the plot
plt.show()



===========================================================

# Pair boot strap for linear regression

def draw_bs_pairs_linreg(x, y, size=1):
    """Perform pairs bootstrap for linear regression."""

    # Set up array of indices to sample from: inds
    inds = np.arange(len(x))

    # Initialize replicates: bs_slope_reps, bs_intercept_reps
    bs_slope_reps = np.empty(size)
    bs_intercept_reps = np.empty(size)

    # Generate replicates
    for i in range(size):
        bs_inds = np.random.choice(inds, size=len(inds))
        bs_x, bs_y = x[bs_inds], y[bs_inds]
        bs_slope_reps[i], bs_intercept_reps[i] = np.polyfit( bs_x, bs_y , 1)

    return bs_slope_reps, bs_intercept_reps



# Generate replicates of slope and intercept using pairs bootstrap
bs_slope_reps, bs_intercept_reps = draw_bs_pairs_linreg( illiteracy, fertility, 1000)

# Compute and print 95% CI for slope
print(np.percentile(bs_slope_reps, [2.5 , 97.5]))

# Plot the histogram
_ = plt.hist(bs_slope_reps, bins=50, normed=True)
_ = plt.xlabel('slope')
_ = plt.ylabel('PDF')
plt.show()
# Generate array of x-values for bootstrap lines: x
x = np.array([0,100])

# Plot the bootstrap lines
for i in range(100):
    _ = plt.plot(x, 
                 bs_slope_reps[i]*x + bs_intercept_reps[i],
                 linewidth=0.5, alpha=0.2, color='red')

# Plot the data
_ = plt.plot(illiteracy , fertility,
marker='.' , linestyle='none')

# Label axes, set the margins, and show the plot
_ = plt.xlabel('illiteracy')
_ = plt.ylabel('fertility')
plt.margins(0.02)
plt.show()



==============================================

# Generating permutation samples

def permutation_sample(data1, data2):
    """Generate a permutation sample from two data sets."""

    # Concatenate the data sets: data
    data = np.concatenate((data1, data2))

    # Permute the concatenated array: permuted_data
    permuted_data = np.random.permutation(data)

    # Split the permuted array into two: perm_sample_1, perm_sample_2
    perm_sample_1 = permuted_data[:len(data1)]
    perm_sample_2 = permuted_data[len(data1):]

    return perm_sample_1, perm_sample_2

# Visualizing the permuted samples

for i in range(50):
    # Generate permutation samples
    perm_sample_1, perm_sample_2 = permutation_sample(rain_june, rain_november)


    # Compute ECDFs
    x_1, y_1 = ecdf(perm_sample_1 )
    x_2, y_2 = ecdf(perm_sample_2 )

    # Plot ECDFs of permutation sample
    _ = plt.plot(x_1, y_1, marker='.', linestyle='none',
                 color='red', alpha=0.02)
    _ = plt.plot(x_2, y_2, marker='.', linestyle='none',
                 color='blue', alpha=0.02)

# Create and plot ECDFs from original data
x_1, y_1 = ecdf( rain_june )
x_2, y_2 = ecdf( rain_november )
_ = plt.plot(x_1, y_1, marker='.', linestyle='none', color='red')
_ = plt.plot(x_2, y_2, marker='.', linestyle='none', color='blue')

# Label axes, set margin, and show plot
plt.margins(0.02)
_ = plt.xlabel('monthly rainfall (mm)')
_ = plt.ylabel('ECDF')
plt.show()



=======================================================================

# Generating permutation replicates

def draw_perm_reps(data_1, data_2, func, size=1):
    """Generate multiple permutation replicates."""

    # Initialize array of replicates: perm_replicates
    perm_replicates = np.empty(size)

    for i in range( size ):
        # Generate permutation sample
        perm_sample_1, perm_sample_2 = permutation_sample(data_1, data_2 )

        # Compute the test statistic
        perm_replicates[i] = func(perm_sample_1, perm_sample_2  )

    return perm_replicates



def diff_of_means(data_1, data_2):
    """Difference in means of two arrays."""

    # The difference of means of data_1, data_2: diff
    diff = data_1.mean() - data_2.mean()

    return diff

# Compute difference of mean impact force from experiment: empirical_diff_means
empirical_diff_means = diff_of_means( force_a , force_b )

# Draw 10,000 permutation replicates: perm_replicates
perm_replicates = draw_perm_reps(force_a, force_b,
                                 diff_of_means, size=10000)

# Compute p-value: p
p = np.sum(perm_replicates >= empirical_diff_means) / len(perm_replicates)

# Print the result
print('p-value =', p)

print( perm_replicates[:5])
print( empirical_diff_means)


# Bootstrap hypothesis test

# Compute mean of all forces: mean_force
mean_force = np.mean(forces_concat)

# Generate shifted arrays
force_a_shifted = force_a - np.mean(force_a) + mean_force
force_b_shifted = force_b - np.mean(force_b) + mean_force

# Compute 10,000 bootstrap replicates from shifted arrays
bs_replicates_a = draw_bs_reps(force_a_shifted, np.mean, size=10000)
bs_replicates_b = draw_bs_reps(force_b_shifted, np.mean, size=10000)

# Get replicates of difference of means: bs_replicates
bs_replicates = bs_replicates_a - bs_replicates_b

# Compute and print p-value: p
p = np.sum(bs_replicates >= empirical_diff_means) / len(bs_replicates)
print('p-value =', p)


=====================================================

# Hypothesis testing for Correlation

# Compute observed correlation: r_obs
r_obs = pearson_r( illiteracy , fertility)

# Initialize permutation replicates: perm_replicates
perm_replicates = np.empty(10000)

# Draw replicates
for i in range( len(perm_replicates) ):
    # Permute illiteracy measurments: illiteracy_permuted
    illiteracy_permuted = np.random.permutation(illiteracy)

    # Compute Pearson correlation
    perm_replicates[i] = pearson_r( illiteracy_permuted,fertility)

# Compute p-value: p
p = np.sum( perm_replicates > r_obs ) / len(perm_replicates)
print('p-val =', p)

===============================================================

# ECDF function

def ecdf(data):
    """Compute ECDF for a one-dimensional array of measurements."""
    # Number of data points: n
    n = len(data)

    # x-data for the ECDF: x
    x = np.sort(data)

    # y-data for the ECDF: y
    y = np.arange(1, n+1 ) / n

    return x, y



# Comparison of ECDFs

# Compute ECDFs
x_set , y_set= ecdf(setosa_petal_length)

x_vers, y_vers= ecdf( versicolor_petal_length )

x_virg, y_virg= ecdf( virginica_petal_length )
# Plot all ECDFs on the same plot
# Generate plot
plt.plot(x_set , y_set,
        marker='.',
        linestyle='none'
        )
# Generate plot
plt.plot(x_vers , y_vers,
        marker='.',
        linestyle='none'
        )
# Generate plot
plt.plot(x_virg, y_virg,
        marker='.',
        linestyle='none'
        )

# Annotate the plot
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Display the plot
plt.show()



# Over laying Percentiles over ECDF


# Specify array of percentiles: percentiles

percentiles= np.array([2.5 , 25 , 50 , 75, 97.5])
# Compute percentiles: ptiles_vers

ptiles_vers= np.percentile( versicolor_petal_length , percentiles )
# Print the result
print( ptiles_vers)


# Plot the ECDF
_ = plt.plot(x_vers, y_vers, '.')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Overlay percentiles as red diamonds.
_ = plt.plot( ptiles_vers, percentiles/100, marker='D', color='red',
         linestyle='none')

# Show the plot
plt.show()


=============================================



##### Compute correlation matrix
## the Pearson r, is often easier to interpret than the covariance. It is computed using the np.corrcoef() function. Like np.cov(), it takes two arrays as arguments and returns a 2D array. Entries [0,0] and [1,1] are necessarily equal to 1 (can you think about why?), and the value we are after is entry [0,1].

#For example, we have two sets of data x and y, np.cov(x, y) returns a 2D array where entries [0,1] and [1,0] are the covariances. Entry [0,0] is the variance of the data in x, and entry [1,1] is the variance of the data in y.



def pearson_r(x, y):
    """Compute Pearson correlation coefficient between two arrays."""
    # Compute correlation matrix: corr_mat
    corr_mat= np.corrcoef( x , y )

    # Return entry [0,1]
    return corr_mat[0,1]

# Compute Pearson correlation coefficient for I. versicolor: r

r= pearson_r(versicolor_petal_length , versicolor_petal_width )
# Print the result
print( r )


# Compute the covariance matrix: covariance_matrix
covariance_matrix= np.cov(versicolor_petal_length, 
 versicolor_petal_width)

# Print covariance matrix

print( covariance_matrix)
# Extract covariance of length and width of petals: petal_cov

petal_cov= covariance_matrix[1,0]
# Print the length/width covariance
print( petal_cov)


==================================================


# The Normal PDF

# Draw 100000 samples from Normal distribution with stds of interest: samples_std1, samples_std3, samples_std10

samples_std1= np.random.normal( 20 , 1, size= 100000)
samples_std3= np.random.normal( 20 , 3, size= 100000)
samples_std10= np.random.normal( 20 , 10, size= 100000)
# Make histograms

plt.hist( samples_std1, normed=True , histtype='step', bins=100)
plt.hist( samples_std3 , normed=True , histtype='step', bins=100 )
plt.hist( samples_std10, normed=True , histtype='step', bins=100 )

# Make a legend, set limits and show plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'))
plt.ylim(-0.01, 0.42)
plt.show()



# The Normal CDF

# Generate CDFs

x_std1, y_std1=ecdf( samples_std1)
x_std3, y_std3=ecdf( samples_std3)
x_std10, y_std10=ecdf( samples_std10)
# Plot CDFs
plt.plot(x_std1, y_std1 , marker='.',linestyle='none' )
plt.plot(x_std3, y_std3 , marker='.',linestyle='none' )
plt.plot(x_std10, y_std10 , marker='.',linestyle='none' )

# Make a legend and show the plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'), loc='lower right')
plt.show()





